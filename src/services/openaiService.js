import OpenAI from 'openai';
import 'dotenv/config';
import logger from '../config/logger.js';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function generateQuiz(level, subject) {
  try {
    const prompt = `G√©n√®re un quiz de niveau ${level} sur le sujet ${subject} avec 10 questions.
Le quiz doit contenir exactement 7 questions √† choix multiples (QCM) et 3 questions ouvertes.
Chaque question doit avoir un champ "weight" (soit 1, soit 2) et jamais plus de 2 sinon √ßa ne marche pas. C'est un nombre qui indique son importance dans le calcul de la note finale. Les questions de poids 2 doivent √™tre plus difficiles ou importantes.
La somme des champs "weight" de toutes les questions doit √™tre exactement 20 (pour une note finale sur 20).
Le format doit √™tre un tableau JSON strict d'objets avec la structure suivante :

[
  {
    "question": "Texte de la question",
    "options": ["option1", "option2", "option3", "option4"], // laisser ce tableau vide pour les questions ouvertes
    "correctAnswer": "La bonne r√©ponse", // laisser ce champ vide pour les questions ouvertes
    "type": "qcm", // mettre 'qcm' si options non vide, 'ouverte' sinon
    "weight": 1
  }
]

Retourne uniquement ce tableau JSON, sans ajout de texte ou de balises markdown.`;

    logger.info(`G√©n√©ration de quiz pour ${subject} niveau ${level} via OpenAI`);

    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      model: "gpt-4o-mini"
    });

    let content = completion.choices[0].message.content;

    // üîß Nettoie les √©ventuelles balises markdown
    content = content.replace(/```(?:json)?\n?/, '').replace(/```$/, '').trim();

    logger.debug("Contenu nettoy√© re√ßu d'OpenAI");

    const response = JSON.parse(content);
    logger.info(`Quiz g√©n√©r√© avec succ√®s: ${response.length} questions`);
    return response;
  } catch (error) {
    logger.error('Erreur lors de la g√©n√©ration du quiz:', error);
    throw error;
  }
}


export async function evaluateAnswer(question, userAnswer, correctAnswer, options = []) {
  try {
    // Cas QCM : comparaison directe
    if (options.length > 0) {
      const isCorrect = userAnswer === correctAnswer;
      logger.debug(`√âvaluation QCM: ${isCorrect ? 'Correct' : 'Incorrect'}`);
      return {
        isCorrect,
        score: isCorrect ? 1 : 0, // Convertir isCorrect en score
        correctAnswer,
        feedback: isCorrect ? "Bonne r√©ponse !" : `La bonne r√©ponse √©tait : ${correctAnswer}`
      };
    }

    logger.info("√âvaluation d'une question ouverte via OpenAI");

    const prompt = `Tu es un professeur qui explique un concept √† un √©l√®ve en tenant compte de sa r√©ponse.

Voici la question : ${question}
R√©ponse de l'√©l√®ve : ${userAnswer}

1. √âvalue d'abord la r√©ponse de l'√©l√®ve (correcte, partiellement correcte, incorrecte)
2. Ensuite, fournis une explication p√©dagogique concise du concept de la question, en adaptant ton explication √† ce que l'√©l√®ve a compris ou mal compris dans sa r√©ponse.

R√©ponds dans ce format JSON strict :
{
  "isCorrect": true/false,
  "score": 1 | 0.5 | 0,
  "correctAnswer": "r√©ponse attendue",
  "explanation": "explication p√©dagogique concise (max 300 caract√®res)"
}

Crit√®res d'√©valuation :
- 1 : r√©ponse enti√®rement correcte
- 0.5 : r√©ponse partiellement correcte (bonne id√©e mais incompl√®te ou avec erreurs)
- 0 : r√©ponse incorrecte, hors sujet ou propos inappropri√©s

Pour l'explication (max 300 caract√®res) :
- Si la r√©ponse est correcte : r√©sume le concept cl√© et donne un exemple rapide
- Si la r√©ponse est partiellement correcte : corrige l'erreur principale et compl√®te le point manquant
- Si la r√©ponse est incorrecte : explique le concept cl√© en une phrase simple
- Si la r√©ponse contient des propos inappropri√©s : explique bri√®vement pourquoi et donne la bonne r√©ponse

L'explication doit √™tre courte, claire et directe.`;

    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: prompt }],
      model: "gpt-4o-mini",
      response_format: { type: "json_object" },
      max_tokens: 400
    });

    const result = JSON.parse(completion.choices[0].message.content);
    
    // Validation et nettoyage des valeurs
    const score = Math.max(0, Math.min(1, parseFloat(result.score) || 0));
    const isCorrect = Boolean(result.isCorrect);
    
    logger.debug(`Question ouverte √©valu√©e: score ${score}, isCorrect ${isCorrect}`);

    return {
      isCorrect,
      score, // Score valid√© entre 0 et 1
      correctAnswer: result.correctAnswer || "",
      explanation: result.explanation || "",
      feedback: result.explanation || "√âvaluation termin√©e"
    };

  } catch (error) {
    logger.error("Erreur lors de l'√©valuation :", error);
    return {
      isCorrect: false,
      score: 0, // Score par d√©faut en cas d'erreur
      correctAnswer: "",
      explanation: "Impossible d'√©valuer la r√©ponse. Veuillez r√©essayer.",
      feedback: "Impossible d'√©valuer la r√©ponse. Veuillez r√©essayer."
    };
  }
}
